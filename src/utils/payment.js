// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –Æ–ö–∞—Å—Å–∞ (–Ø–Ω–¥–µ–∫—Å)

import { PAYMENT_CONFIG } from '../config/payment';

// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä UUID v4 (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
const generateUUID = () => {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    const r = Math.random() * 16 | 0;
    const v = c === 'x' ? r : ((r & 0x3) | 0x8);
    return v.toString(16);
  });
};

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ –Æ–ö–∞—Å—Å–µ
 * @param {Object} orderData - –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
 * @param {number} amount - –°—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö
 * @returns {Promise<Object>} - –û–±—ä–µ–∫—Ç —Å URL –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏ payment_id
 */
export const createPayment = async (orderData, amount) => {
  try {
    // const idempotenceKey = generateUUID(); // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è

    const paymentData = {
      amount: {
        value: amount.toFixed(2), // –Æ–ö–∞—Å—Å–∞ —Ç—Ä–µ–±—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å 2 –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        currency: PAYMENT_CONFIG.yookassa.currency
      },
      capture: PAYMENT_CONFIG.yookassa.capture,
      confirmation: {
        type: 'redirect',
        return_url: PAYMENT_CONFIG.yookassa.returnUrl
      },
      description: `${PAYMENT_CONFIG.yookassa.description} ‚Ññ${orderData.id || 'NEW'}`,
      metadata: {
        order_id: orderData.id,
        customer_name: orderData.customer,
        customer_email: orderData.contactInfo?.email,
        customer_phone: orderData.contactInfo?.phone
      },
      // –ß–µ–∫ –¥–ª—è 54-–§–ó (–µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–∞—Å—Å–∞)
      receipt: {
        customer: {
          email: orderData.contactInfo?.email || 'noreply@airshop.ru',
          phone: orderData.contactInfo?.phone
        },
        items: orderData.items?.map(item => ({
          description: item.name,
          quantity: item.quantity.toString(),
          amount: {
            value: item.price.toFixed(2),
            currency: PAYMENT_CONFIG.yookassa.currency
          },
          vat_code: PAYMENT_CONFIG.yookassa.vatCode,
          payment_mode: 'full_prepayment',
          payment_subject: 'commodity'
        })) || []
      }
    };

    // –í–ê–ñ–ù–û: –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ —á–µ—Ä–µ–∑ backend
    // –ù–µ —Ö—Ä–∞–Ω–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª—é—á–∏ –≤ frontend –∫–æ–¥–µ!

    // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ
    if (PAYMENT_CONFIG.mode === 'test') {
      console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –Æ–ö–∞—Å—Å–∞:', paymentData);

      return {
        success: true,
        payment_id: `test-${generateUUID()}`,
        confirmation_url: '#test-payment',
        status: 'pending',
        paymentData: paymentData,
        message: '–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω –ª–æ–∫–∞–ª—å–Ω–æ'
      };
    }

    // –í production —Ä–µ–∂–∏–º–µ –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ —á–µ—Ä–µ–∑ –≤–∞—à backend
    // –ü—Ä–∏–º–µ—Ä —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ API endpoint:
    // const response = await fetch('/api/payment/create', {
    //   method: 'POST',
    //   headers: {
    //     'Content-Type': 'application/json',
    //     'Idempotence-Key': idempotenceKey
    //   },
    //   body: JSON.stringify(paymentData)
    // });

    console.warn('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–∞—Å—Ç—Ä–æ–π—Ç–µ backend –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Æ–ö–∞—Å—Å–∞ API');

    return {
      success: false,
      error: 'Backend –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ API endpoint –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Æ–ö–∞—Å—Å–æ–π.'
    };

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', error);
    return {
      success: false,
      error: error.message
    };
  }
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
 * @param {string} paymentId - ID –ø–ª–∞—Ç–µ–∂–∞
 * @returns {Promise<Object>} - –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
 */
export const checkPaymentStatus = async (paymentId) => {
  try {
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —ç—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –≤–∞—à–µ–º—É backend
    // –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä–∏—Ç —Å—Ç–∞—Ç—É—Å –≤ –Æ–ö–∞—Å—Å–µ

    // –ü—Ä–∏–º–µ—Ä: const response = await fetch(`/api/payment/status/${paymentId}`);

    if (PAYMENT_CONFIG.mode === 'test') {
      return {
        success: true,
        status: PAYMENT_CONFIG.paymentStatus.PENDING,
        payment_id: paymentId
      };
    }

    console.warn('‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π—Ç–µ backend –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞');

    return {
      success: false,
      error: 'Backend –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
    };

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
    return {
      success: false,
      error: error.message
    };
  }
};

/**
 * –û—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞
 * @param {string} paymentId - ID –ø–ª–∞—Ç–µ–∂–∞
 * @returns {Promise<Object>}
 */
export const cancelPayment = async (paymentId) => {
  try {
    if (PAYMENT_CONFIG.mode === 'test') {
      console.log('üîÑ –û—Ç–º–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:', paymentId);
      return {
        success: true,
        payment_id: paymentId,
        status: 'canceled'
      };
    }

    // –í production —á–µ—Ä–µ–∑ backend
    // const response = await fetch(`/api/payment/cancel/${paymentId}`, {
    //   method: 'POST'
    // });

    console.warn('‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π—Ç–µ backend –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–µ–π');

    return {
      success: false,
      error: 'Backend –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
    };

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞:', error);
    return {
      success: false,
      error: error.message
    };
  }
};

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ –≤ localStorage
 * @param {Object} paymentInfo - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ
 */
export const savePaymentInfo = (paymentInfo) => {
  try {
    const payments = JSON.parse(localStorage.getItem('payments') || '[]');
    payments.push({
      ...paymentInfo,
      timestamp: new Date().toISOString()
    });
    localStorage.setItem('payments', JSON.stringify(payments));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ:', error);
  }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π –∏–∑ localStorage
 * @returns {Array} - –ú–∞—Å—Å–∏–≤ –ø–ª–∞—Ç–µ–∂–µ–π
 */
export const getPayments = () => {
  try {
    return JSON.parse(localStorage.getItem('payments') || '[]');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π:', error);
    return [];
  }
};

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
 * @returns {string} - –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
 */
export const generateOrderNumber = () => {
  const timestamp = Date.now();
  const random = Math.floor(Math.random() * 1000);
  return `AirShop-${timestamp}-${random}`;
};

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã –¥–ª—è –Æ–ö–∞—Å—Å—ã
 * @param {number} amount - –°—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö
 * @returns {string} - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞ —Å 2 –∑–Ω–∞–∫–∞–º–∏
 */
export const formatPaymentAmount = (amount) => {
  return amount.toFixed(2);
};

const paymentUtils = {
  createPayment,
  checkPaymentStatus,
  cancelPayment,
  savePaymentInfo,
  getPayments,
  generateOrderNumber,
  formatPaymentAmount
};

export default paymentUtils;
